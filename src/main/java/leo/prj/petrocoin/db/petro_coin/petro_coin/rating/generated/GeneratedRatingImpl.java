package leo.prj.petrocoin.db.petro_coin.petro_coin.rating.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import java.util.StringJoiner;
import leo.prj.petrocoin.db.petro_coin.petro_coin.currency.Currency;
import leo.prj.petrocoin.db.petro_coin.petro_coin.rating.Rating;

/**
 * The generated base implementation of the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.rating.Rating}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRatingImpl implements Rating {
    
    private long id;
    private Long fkCurrencyFrom;
    private Long fkCurrencyTo;
    private Double sellRating;
    private Double buyRating;
    private Timestamp createdDate;
    
    protected GeneratedRatingImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public OptionalLong getFkCurrencyFrom() {
        return OptionalUtil.ofNullable(fkCurrencyFrom);
    }
    
    @Override
    public OptionalLong getFkCurrencyTo() {
        return OptionalUtil.ofNullable(fkCurrencyTo);
    }
    
    @Override
    public OptionalDouble getSellRating() {
        return OptionalUtil.ofNullable(sellRating);
    }
    
    @Override
    public OptionalDouble getBuyRating() {
        return OptionalUtil.ofNullable(buyRating);
    }
    
    @Override
    public Optional<Timestamp> getCreatedDate() {
        return Optional.ofNullable(createdDate);
    }
    
    @Override
    public Rating setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Rating setFkCurrencyFrom(Long fkCurrencyFrom) {
        this.fkCurrencyFrom = fkCurrencyFrom;
        return this;
    }
    
    @Override
    public Rating setFkCurrencyTo(Long fkCurrencyTo) {
        this.fkCurrencyTo = fkCurrencyTo;
        return this;
    }
    
    @Override
    public Rating setSellRating(Double sellRating) {
        this.sellRating = sellRating;
        return this;
    }
    
    @Override
    public Rating setBuyRating(Double buyRating) {
        this.buyRating = buyRating;
        return this;
    }
    
    @Override
    public Rating setCreatedDate(Timestamp createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    @Override
    public Optional<Currency> findFkCurrencyFrom(Manager<Currency> foreignManager) {
        if (getFkCurrencyFrom().isPresent()) {
            return foreignManager.stream().filter(Currency.ID.equal(getFkCurrencyFrom().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Currency> findFkCurrencyTo(Manager<Currency> foreignManager) {
        if (getFkCurrencyTo().isPresent()) {
            return foreignManager.stream().filter(Currency.ID.equal(getFkCurrencyTo().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "             + Objects.toString(getId()));
        sj.add("fkCurrencyFrom = " + Objects.toString(OptionalUtil.unwrap(getFkCurrencyFrom())));
        sj.add("fkCurrencyTo = "   + Objects.toString(OptionalUtil.unwrap(getFkCurrencyTo())));
        sj.add("sellRating = "     + Objects.toString(OptionalUtil.unwrap(getSellRating())));
        sj.add("buyRating = "      + Objects.toString(OptionalUtil.unwrap(getBuyRating())));
        sj.add("createdDate = "    + Objects.toString(OptionalUtil.unwrap(getCreatedDate())));
        return "RatingImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Rating)) { return false; }
        final Rating thatRating = (Rating)that;
        if (this.getId() != thatRating.getId()) { return false; }
        if (!Objects.equals(this.getFkCurrencyFrom(), thatRating.getFkCurrencyFrom())) { return false; }
        if (!Objects.equals(this.getFkCurrencyTo(), thatRating.getFkCurrencyTo())) { return false; }
        if (!Objects.equals(this.getSellRating(), thatRating.getSellRating())) { return false; }
        if (!Objects.equals(this.getBuyRating(), thatRating.getBuyRating())) { return false; }
        if (!Objects.equals(this.getCreatedDate(), thatRating.getCreatedDate())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkCurrencyFrom()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkCurrencyTo()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSellRating()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getBuyRating()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCreatedDate()));
        return hash;
    }
}