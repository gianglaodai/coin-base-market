package leo.prj.petrocoin.db.petro_coin.petro_coin.rating.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import leo.prj.petrocoin.db.petro_coin.petro_coin.currency.Currency;
import leo.prj.petrocoin.db.petro_coin.petro_coin.rating.Rating;

/**
 * The generated base for the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.rating.Rating}-interface
 * representing entities of the {@code rating}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedRating {
    
    /**
     * This Field corresponds to the {@link Rating} field that can be obtained
     * using the {@link Rating#getId()} method.
     */
    LongField<Rating, Long> ID = LongField.create(
        Identifier.ID,
        Rating::getId,
        Rating::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Rating} field that can be obtained
     * using the {@link Rating#getFkCurrencyFrom()} method.
     */
    ComparableForeignKeyField<Rating, Long, Long, Currency> FK_CURRENCY_FROM = ComparableForeignKeyField.create(
        Identifier.FK_CURRENCY_FROM,
        o -> OptionalUtil.unwrap(o.getFkCurrencyFrom()),
        Rating::setFkCurrencyFrom,
        Currency.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Rating} field that can be obtained
     * using the {@link Rating#getFkCurrencyTo()} method.
     */
    ComparableForeignKeyField<Rating, Long, Long, Currency> FK_CURRENCY_TO = ComparableForeignKeyField.create(
        Identifier.FK_CURRENCY_TO,
        o -> OptionalUtil.unwrap(o.getFkCurrencyTo()),
        Rating::setFkCurrencyTo,
        Currency.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Rating} field that can be obtained
     * using the {@link Rating#getSellRating()} method.
     */
    ComparableField<Rating, Double, Double> SELL_RATING = ComparableField.create(
        Identifier.SELL_RATING,
        o -> OptionalUtil.unwrap(o.getSellRating()),
        Rating::setSellRating,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Rating} field that can be obtained
     * using the {@link Rating#getBuyRating()} method.
     */
    ComparableField<Rating, Double, Double> BUY_RATING = ComparableField.create(
        Identifier.BUY_RATING,
        o -> OptionalUtil.unwrap(o.getBuyRating()),
        Rating::setBuyRating,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Rating} field that can be obtained
     * using the {@link Rating#getCreatedDate()} method.
     */
    ComparableField<Rating, Timestamp, Timestamp> CREATED_DATE = ComparableField.create(
        Identifier.CREATED_DATE,
        o -> OptionalUtil.unwrap(o.getCreatedDate()),
        Rating::setCreatedDate,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Rating. The id field corresponds to the database
     * column petro-coin.petro-coin.rating.id.
     * 
     * @return the id of this Rating
     */
    long getId();
    
    /**
     * Returns the fkCurrencyFrom of this Rating. The fkCurrencyFrom field
     * corresponds to the database column
     * petro-coin.petro-coin.rating.fk_currency_from.
     * 
     * @return the fkCurrencyFrom of this Rating
     */
    OptionalLong getFkCurrencyFrom();
    
    /**
     * Returns the fkCurrencyTo of this Rating. The fkCurrencyTo field
     * corresponds to the database column
     * petro-coin.petro-coin.rating.fk_currency_to.
     * 
     * @return the fkCurrencyTo of this Rating
     */
    OptionalLong getFkCurrencyTo();
    
    /**
     * Returns the sellRating of this Rating. The sellRating field corresponds
     * to the database column petro-coin.petro-coin.rating.sell_rating.
     * 
     * @return the sellRating of this Rating
     */
    OptionalDouble getSellRating();
    
    /**
     * Returns the buyRating of this Rating. The buyRating field corresponds to
     * the database column petro-coin.petro-coin.rating.buy_rating.
     * 
     * @return the buyRating of this Rating
     */
    OptionalDouble getBuyRating();
    
    /**
     * Returns the createdDate of this Rating. The createdDate field corresponds
     * to the database column petro-coin.petro-coin.rating.created_date.
     * 
     * @return the createdDate of this Rating
     */
    Optional<Timestamp> getCreatedDate();
    
    /**
     * Sets the id of this Rating. The id field corresponds to the database
     * column petro-coin.petro-coin.rating.id.
     * 
     * @param id to set of this Rating
     * @return   this Rating instance
     */
    Rating setId(long id);
    
    /**
     * Sets the fkCurrencyFrom of this Rating. The fkCurrencyFrom field
     * corresponds to the database column
     * petro-coin.petro-coin.rating.fk_currency_from.
     * 
     * @param fkCurrencyFrom to set of this Rating
     * @return               this Rating instance
     */
    Rating setFkCurrencyFrom(Long fkCurrencyFrom);
    
    /**
     * Sets the fkCurrencyTo of this Rating. The fkCurrencyTo field corresponds
     * to the database column petro-coin.petro-coin.rating.fk_currency_to.
     * 
     * @param fkCurrencyTo to set of this Rating
     * @return             this Rating instance
     */
    Rating setFkCurrencyTo(Long fkCurrencyTo);
    
    /**
     * Sets the sellRating of this Rating. The sellRating field corresponds to
     * the database column petro-coin.petro-coin.rating.sell_rating.
     * 
     * @param sellRating to set of this Rating
     * @return           this Rating instance
     */
    Rating setSellRating(Double sellRating);
    
    /**
     * Sets the buyRating of this Rating. The buyRating field corresponds to the
     * database column petro-coin.petro-coin.rating.buy_rating.
     * 
     * @param buyRating to set of this Rating
     * @return          this Rating instance
     */
    Rating setBuyRating(Double buyRating);
    
    /**
     * Sets the createdDate of this Rating. The createdDate field corresponds to
     * the database column petro-coin.petro-coin.rating.created_date.
     * 
     * @param createdDate to set of this Rating
     * @return            this Rating instance
     */
    Rating setCreatedDate(Timestamp createdDate);
    
    /**
     * Queries the specified manager for the referenced Currency. If no such
     * Currency exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Currency> findFkCurrencyFrom(Manager<Currency> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Currency. If no such
     * Currency exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Currency> findFkCurrencyTo(Manager<Currency> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Rating> {
        
        ID               ("id"),
        FK_CURRENCY_FROM ("fk_currency_from"),
        FK_CURRENCY_TO   ("fk_currency_to"),
        SELL_RATING      ("sell_rating"),
        BUY_RATING       ("buy_rating"),
        CREATED_DATE     ("created_date");
        
        private final String columnId;
        private final TableIdentifier<Rating> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "petro-coin";
        }
        
        @Override
        public String getSchemaId() {
            return "petro-coin";
        }
        
        @Override
        public String getTableId() {
            return "rating";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Rating> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}