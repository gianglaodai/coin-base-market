package leo.prj.petrocoin.db.petro_coin.petro_coin.petro_transaction.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.math.BigInteger;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.StringJoiner;
import leo.prj.petrocoin.db.petro_coin.petro_coin.petro_transaction.PetroTransaction;
import leo.prj.petrocoin.db.petro_coin.petro_coin.rating.Rating;
import leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.Wallet;

/**
 * The generated base implementation of the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.petro_transaction.PetroTransaction}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPetroTransactionImpl implements PetroTransaction {
    
    private BigInteger id;
    private Long fkWallet;
    private Long fkRating;
    private Double amount;
    private Integer isBuying;
    
    protected GeneratedPetroTransactionImpl() {}
    
    @Override
    public BigInteger getId() {
        return id;
    }
    
    @Override
    public OptionalLong getFkWallet() {
        return OptionalUtil.ofNullable(fkWallet);
    }
    
    @Override
    public OptionalLong getFkRating() {
        return OptionalUtil.ofNullable(fkRating);
    }
    
    @Override
    public OptionalDouble getAmount() {
        return OptionalUtil.ofNullable(amount);
    }
    
    @Override
    public OptionalInt getIsBuying() {
        return OptionalUtil.ofNullable(isBuying);
    }
    
    @Override
    public PetroTransaction setId(BigInteger id) {
        this.id = id;
        return this;
    }
    
    @Override
    public PetroTransaction setFkWallet(Long fkWallet) {
        this.fkWallet = fkWallet;
        return this;
    }
    
    @Override
    public PetroTransaction setFkRating(Long fkRating) {
        this.fkRating = fkRating;
        return this;
    }
    
    @Override
    public PetroTransaction setAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    @Override
    public PetroTransaction setIsBuying(Integer isBuying) {
        this.isBuying = isBuying;
        return this;
    }
    
    @Override
    public Optional<Wallet> findFkWallet(Manager<Wallet> foreignManager) {
        if (getFkWallet().isPresent()) {
            return foreignManager.stream().filter(Wallet.ID.equal(getFkWallet().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Rating> findFkRating(Manager<Rating> foreignManager) {
        if (getFkRating().isPresent()) {
            return foreignManager.stream().filter(Rating.ID.equal(getFkRating().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "       + Objects.toString(getId()));
        sj.add("fkWallet = " + Objects.toString(OptionalUtil.unwrap(getFkWallet())));
        sj.add("fkRating = " + Objects.toString(OptionalUtil.unwrap(getFkRating())));
        sj.add("amount = "   + Objects.toString(OptionalUtil.unwrap(getAmount())));
        sj.add("isBuying = " + Objects.toString(OptionalUtil.unwrap(getIsBuying())));
        return "PetroTransactionImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof PetroTransaction)) { return false; }
        final PetroTransaction thatPetroTransaction = (PetroTransaction)that;
        if (!Objects.equals(this.getId(), thatPetroTransaction.getId())) { return false; }
        if (!Objects.equals(this.getFkWallet(), thatPetroTransaction.getFkWallet())) { return false; }
        if (!Objects.equals(this.getFkRating(), thatPetroTransaction.getFkRating())) { return false; }
        if (!Objects.equals(this.getAmount(), thatPetroTransaction.getAmount())) { return false; }
        if (!Objects.equals(this.getIsBuying(), thatPetroTransaction.getIsBuying())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkWallet()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkRating()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAmount()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsBuying()));
        return hash;
    }
}