package leo.prj.petrocoin.db.petro_coin.petro_coin.user.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;
import leo.prj.petrocoin.db.petro_coin.petro_coin.user.User;

/**
 * The generated base for the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.user.User}-interface representing
 * entities of the {@code user}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUser {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getMobile()} method.
     */
    StringField<User, String> MOBILE = StringField.create(
        Identifier.MOBILE,
        o -> OptionalUtil.unwrap(o.getMobile()),
        User::setMobile,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getBankCode()} method.
     */
    StringField<User, String> BANK_CODE = StringField.create(
        Identifier.BANK_CODE,
        o -> OptionalUtil.unwrap(o.getBankCode()),
        User::setBankCode,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getId()} method.
     */
    LongField<User, Long> ID = LongField.create(
        Identifier.ID,
        User::getId,
        User::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getFullName()} method.
     */
    StringField<User, String> FULL_NAME = StringField.create(
        Identifier.FULL_NAME,
        o -> OptionalUtil.unwrap(o.getFullName()),
        User::setFullName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPassword()} method.
     */
    StringField<User, String> PASSWORD = StringField.create(
        Identifier.PASSWORD,
        o -> OptionalUtil.unwrap(o.getPassword()),
        User::setPassword,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getEmail()} method.
     */
    StringField<User, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        User::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPhone()} method.
     */
    StringField<User, String> PHONE = StringField.create(
        Identifier.PHONE,
        o -> OptionalUtil.unwrap(o.getPhone()),
        User::setPhone,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getNation()} method.
     */
    StringField<User, String> NATION = StringField.create(
        Identifier.NATION,
        o -> OptionalUtil.unwrap(o.getNation()),
        User::setNation,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getIsActive()} method.
     */
    ComparableField<User, Integer, Integer> IS_ACTIVE = ComparableField.create(
        Identifier.IS_ACTIVE,
        o -> OptionalUtil.unwrap(o.getIsActive()),
        User::setIsActive,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getIsDelete()} method.
     */
    ComparableField<User, Integer, Integer> IS_DELETE = ComparableField.create(
        Identifier.IS_DELETE,
        o -> OptionalUtil.unwrap(o.getIsDelete()),
        User::setIsDelete,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getBankName()} method.
     */
    StringField<User, String> BANK_NAME = StringField.create(
        Identifier.BANK_NAME,
        o -> OptionalUtil.unwrap(o.getBankName()),
        User::setBankName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getBankAccount()} method.
     */
    StringField<User, String> BANK_ACCOUNT = StringField.create(
        Identifier.BANK_ACCOUNT,
        o -> OptionalUtil.unwrap(o.getBankAccount()),
        User::setBankAccount,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getBankAccountName()} method.
     */
    StringField<User, String> BANK_ACCOUNT_NAME = StringField.create(
        Identifier.BANK_ACCOUNT_NAME,
        o -> OptionalUtil.unwrap(o.getBankAccountName()),
        User::setBankAccountName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getCreatedDate()} method.
     */
    ComparableField<User, Timestamp, Timestamp> CREATED_DATE = ComparableField.create(
        Identifier.CREATED_DATE,
        o -> OptionalUtil.unwrap(o.getCreatedDate()),
        User::setCreatedDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUpdatedDate()} method.
     */
    ComparableField<User, Timestamp, Timestamp> UPDATED_DATE = ComparableField.create(
        Identifier.UPDATED_DATE,
        o -> OptionalUtil.unwrap(o.getUpdatedDate()),
        User::setUpdatedDate,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the mobile of this User. The mobile field corresponds to the
     * database column petro-coin.petro-coin.user.mobile.
     * 
     * @return the mobile of this User
     */
    Optional<String> getMobile();
    
    /**
     * Returns the bankCode of this User. The bankCode field corresponds to the
     * database column petro-coin.petro-coin.user.bank_code.
     * 
     * @return the bankCode of this User
     */
    Optional<String> getBankCode();
    
    /**
     * Returns the id of this User. The id field corresponds to the database
     * column petro-coin.petro-coin.user.id.
     * 
     * @return the id of this User
     */
    long getId();
    
    /**
     * Returns the fullName of this User. The fullName field corresponds to the
     * database column petro-coin.petro-coin.user.full_name.
     * 
     * @return the fullName of this User
     */
    Optional<String> getFullName();
    
    /**
     * Returns the password of this User. The password field corresponds to the
     * database column petro-coin.petro-coin.user.password.
     * 
     * @return the password of this User
     */
    Optional<String> getPassword();
    
    /**
     * Returns the email of this User. The email field corresponds to the
     * database column petro-coin.petro-coin.user.email.
     * 
     * @return the email of this User
     */
    Optional<String> getEmail();
    
    /**
     * Returns the phone of this User. The phone field corresponds to the
     * database column petro-coin.petro-coin.user.phone.
     * 
     * @return the phone of this User
     */
    Optional<String> getPhone();
    
    /**
     * Returns the nation of this User. The nation field corresponds to the
     * database column petro-coin.petro-coin.user.nation.
     * 
     * @return the nation of this User
     */
    Optional<String> getNation();
    
    /**
     * Returns the isActive of this User. The isActive field corresponds to the
     * database column petro-coin.petro-coin.user.is_active.
     * 
     * @return the isActive of this User
     */
    OptionalInt getIsActive();
    
    /**
     * Returns the isDelete of this User. The isDelete field corresponds to the
     * database column petro-coin.petro-coin.user.is_delete.
     * 
     * @return the isDelete of this User
     */
    OptionalInt getIsDelete();
    
    /**
     * Returns the bankName of this User. The bankName field corresponds to the
     * database column petro-coin.petro-coin.user.bank_name.
     * 
     * @return the bankName of this User
     */
    Optional<String> getBankName();
    
    /**
     * Returns the bankAccount of this User. The bankAccount field corresponds
     * to the database column petro-coin.petro-coin.user.bank_account.
     * 
     * @return the bankAccount of this User
     */
    Optional<String> getBankAccount();
    
    /**
     * Returns the bankAccountName of this User. The bankAccountName field
     * corresponds to the database column
     * petro-coin.petro-coin.user.bank_account_name.
     * 
     * @return the bankAccountName of this User
     */
    Optional<String> getBankAccountName();
    
    /**
     * Returns the createdDate of this User. The createdDate field corresponds
     * to the database column petro-coin.petro-coin.user.created_date.
     * 
     * @return the createdDate of this User
     */
    Optional<Timestamp> getCreatedDate();
    
    /**
     * Returns the updatedDate of this User. The updatedDate field corresponds
     * to the database column petro-coin.petro-coin.user.updated_date.
     * 
     * @return the updatedDate of this User
     */
    Optional<Timestamp> getUpdatedDate();
    
    /**
     * Sets the mobile of this User. The mobile field corresponds to the
     * database column petro-coin.petro-coin.user.mobile.
     * 
     * @param mobile to set of this User
     * @return       this User instance
     */
    User setMobile(String mobile);
    
    /**
     * Sets the bankCode of this User. The bankCode field corresponds to the
     * database column petro-coin.petro-coin.user.bank_code.
     * 
     * @param bankCode to set of this User
     * @return         this User instance
     */
    User setBankCode(String bankCode);
    
    /**
     * Sets the id of this User. The id field corresponds to the database column
     * petro-coin.petro-coin.user.id.
     * 
     * @param id to set of this User
     * @return   this User instance
     */
    User setId(long id);
    
    /**
     * Sets the fullName of this User. The fullName field corresponds to the
     * database column petro-coin.petro-coin.user.full_name.
     * 
     * @param fullName to set of this User
     * @return         this User instance
     */
    User setFullName(String fullName);
    
    /**
     * Sets the password of this User. The password field corresponds to the
     * database column petro-coin.petro-coin.user.password.
     * 
     * @param password to set of this User
     * @return         this User instance
     */
    User setPassword(String password);
    
    /**
     * Sets the email of this User. The email field corresponds to the database
     * column petro-coin.petro-coin.user.email.
     * 
     * @param email to set of this User
     * @return      this User instance
     */
    User setEmail(String email);
    
    /**
     * Sets the phone of this User. The phone field corresponds to the database
     * column petro-coin.petro-coin.user.phone.
     * 
     * @param phone to set of this User
     * @return      this User instance
     */
    User setPhone(String phone);
    
    /**
     * Sets the nation of this User. The nation field corresponds to the
     * database column petro-coin.petro-coin.user.nation.
     * 
     * @param nation to set of this User
     * @return       this User instance
     */
    User setNation(String nation);
    
    /**
     * Sets the isActive of this User. The isActive field corresponds to the
     * database column petro-coin.petro-coin.user.is_active.
     * 
     * @param isActive to set of this User
     * @return         this User instance
     */
    User setIsActive(Integer isActive);
    
    /**
     * Sets the isDelete of this User. The isDelete field corresponds to the
     * database column petro-coin.petro-coin.user.is_delete.
     * 
     * @param isDelete to set of this User
     * @return         this User instance
     */
    User setIsDelete(Integer isDelete);
    
    /**
     * Sets the bankName of this User. The bankName field corresponds to the
     * database column petro-coin.petro-coin.user.bank_name.
     * 
     * @param bankName to set of this User
     * @return         this User instance
     */
    User setBankName(String bankName);
    
    /**
     * Sets the bankAccount of this User. The bankAccount field corresponds to
     * the database column petro-coin.petro-coin.user.bank_account.
     * 
     * @param bankAccount to set of this User
     * @return            this User instance
     */
    User setBankAccount(String bankAccount);
    
    /**
     * Sets the bankAccountName of this User. The bankAccountName field
     * corresponds to the database column
     * petro-coin.petro-coin.user.bank_account_name.
     * 
     * @param bankAccountName to set of this User
     * @return                this User instance
     */
    User setBankAccountName(String bankAccountName);
    
    /**
     * Sets the createdDate of this User. The createdDate field corresponds to
     * the database column petro-coin.petro-coin.user.created_date.
     * 
     * @param createdDate to set of this User
     * @return            this User instance
     */
    User setCreatedDate(Timestamp createdDate);
    
    /**
     * Sets the updatedDate of this User. The updatedDate field corresponds to
     * the database column petro-coin.petro-coin.user.updated_date.
     * 
     * @param updatedDate to set of this User
     * @return            this User instance
     */
    User setUpdatedDate(Timestamp updatedDate);
    
    enum Identifier implements ColumnIdentifier<User> {
        
        MOBILE            ("mobile"),
        BANK_CODE         ("bank_code"),
        ID                ("id"),
        FULL_NAME         ("full_name"),
        PASSWORD          ("password"),
        EMAIL             ("email"),
        PHONE             ("phone"),
        NATION            ("nation"),
        IS_ACTIVE         ("is_active"),
        IS_DELETE         ("is_delete"),
        BANK_NAME         ("bank_name"),
        BANK_ACCOUNT      ("bank_account"),
        BANK_ACCOUNT_NAME ("bank_account_name"),
        CREATED_DATE      ("created_date"),
        UPDATED_DATE      ("updated_date");
        
        private final String columnId;
        private final TableIdentifier<User> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "petro-coin";
        }
        
        @Override
        public String getSchemaId() {
            return "petro-coin";
        }
        
        @Override
        public String getTableId() {
            return "user";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<User> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}