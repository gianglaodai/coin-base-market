package leo.prj.petrocoin.db.petro_coin.petro_coin.transaction.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import java.util.StringJoiner;
import leo.prj.petrocoin.db.petro_coin.petro_coin.transaction.Transaction;
import leo.prj.petrocoin.db.petro_coin.petro_coin.user.User;

/**
 * The generated base implementation of the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.transaction.Transaction}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTransactionImpl implements Transaction {
    
    private BigInteger id;
    private Long fkUserFrom;
    private Long fkUserTo;
    private Long fkCurrency;
    private Double amount;
    private String status;
    private String content;
    private Timestamp createdDate;
    private Timestamp executionDate;
    
    protected GeneratedTransactionImpl() {}
    
    @Override
    public BigInteger getId() {
        return id;
    }
    
    @Override
    public OptionalLong getFkUserFrom() {
        return OptionalUtil.ofNullable(fkUserFrom);
    }
    
    @Override
    public OptionalLong getFkUserTo() {
        return OptionalUtil.ofNullable(fkUserTo);
    }
    
    @Override
    public OptionalLong getFkCurrency() {
        return OptionalUtil.ofNullable(fkCurrency);
    }
    
    @Override
    public OptionalDouble getAmount() {
        return OptionalUtil.ofNullable(amount);
    }
    
    @Override
    public Optional<String> getStatus() {
        return Optional.ofNullable(status);
    }
    
    @Override
    public Optional<String> getContent() {
        return Optional.ofNullable(content);
    }
    
    @Override
    public Optional<Timestamp> getCreatedDate() {
        return Optional.ofNullable(createdDate);
    }
    
    @Override
    public Optional<Timestamp> getExecutionDate() {
        return Optional.ofNullable(executionDate);
    }
    
    @Override
    public Transaction setId(BigInteger id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Transaction setFkUserFrom(Long fkUserFrom) {
        this.fkUserFrom = fkUserFrom;
        return this;
    }
    
    @Override
    public Transaction setFkUserTo(Long fkUserTo) {
        this.fkUserTo = fkUserTo;
        return this;
    }
    
    @Override
    public Transaction setFkCurrency(Long fkCurrency) {
        this.fkCurrency = fkCurrency;
        return this;
    }
    
    @Override
    public Transaction setAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    @Override
    public Transaction setStatus(String status) {
        this.status = status;
        return this;
    }
    
    @Override
    public Transaction setContent(String content) {
        this.content = content;
        return this;
    }
    
    @Override
    public Transaction setCreatedDate(Timestamp createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    @Override
    public Transaction setExecutionDate(Timestamp executionDate) {
        this.executionDate = executionDate;
        return this;
    }
    
    @Override
    public Optional<User> findFkUserFrom(Manager<User> foreignManager) {
        if (getFkUserFrom().isPresent()) {
            return foreignManager.stream().filter(User.ID.equal(getFkUserFrom().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<User> findFkUserTo(Manager<User> foreignManager) {
        if (getFkUserTo().isPresent()) {
            return foreignManager.stream().filter(User.ID.equal(getFkUserTo().getAsLong())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "            + Objects.toString(getId()));
        sj.add("fkUserFrom = "    + Objects.toString(OptionalUtil.unwrap(getFkUserFrom())));
        sj.add("fkUserTo = "      + Objects.toString(OptionalUtil.unwrap(getFkUserTo())));
        sj.add("fkCurrency = "    + Objects.toString(OptionalUtil.unwrap(getFkCurrency())));
        sj.add("amount = "        + Objects.toString(OptionalUtil.unwrap(getAmount())));
        sj.add("status = "        + Objects.toString(OptionalUtil.unwrap(getStatus())));
        sj.add("content = "       + Objects.toString(OptionalUtil.unwrap(getContent())));
        sj.add("createdDate = "   + Objects.toString(OptionalUtil.unwrap(getCreatedDate())));
        sj.add("executionDate = " + Objects.toString(OptionalUtil.unwrap(getExecutionDate())));
        return "TransactionImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Transaction)) { return false; }
        final Transaction thatTransaction = (Transaction)that;
        if (!Objects.equals(this.getId(), thatTransaction.getId())) { return false; }
        if (!Objects.equals(this.getFkUserFrom(), thatTransaction.getFkUserFrom())) { return false; }
        if (!Objects.equals(this.getFkUserTo(), thatTransaction.getFkUserTo())) { return false; }
        if (!Objects.equals(this.getFkCurrency(), thatTransaction.getFkCurrency())) { return false; }
        if (!Objects.equals(this.getAmount(), thatTransaction.getAmount())) { return false; }
        if (!Objects.equals(this.getStatus(), thatTransaction.getStatus())) { return false; }
        if (!Objects.equals(this.getContent(), thatTransaction.getContent())) { return false; }
        if (!Objects.equals(this.getCreatedDate(), thatTransaction.getCreatedDate())) { return false; }
        if (!Objects.equals(this.getExecutionDate(), thatTransaction.getExecutionDate())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkUserFrom()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkUserTo()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkCurrency()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAmount()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getStatus()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getContent()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCreatedDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getExecutionDate()));
        return hash;
    }
}