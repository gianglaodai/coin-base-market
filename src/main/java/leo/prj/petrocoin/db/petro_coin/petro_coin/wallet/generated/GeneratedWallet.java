package leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import java.util.OptionalDouble;
import leo.prj.petrocoin.db.petro_coin.petro_coin.currency.Currency;
import leo.prj.petrocoin.db.petro_coin.petro_coin.user.User;
import leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.Wallet;

/**
 * The generated base for the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.Wallet}-interface
 * representing entities of the {@code wallet}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedWallet {
    
    /**
     * This Field corresponds to the {@link Wallet} field that can be obtained
     * using the {@link Wallet#getId()} method.
     */
    LongField<Wallet, Long> ID = LongField.create(
        Identifier.ID,
        Wallet::getId,
        Wallet::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Wallet} field that can be obtained
     * using the {@link Wallet#getFkUser()} method.
     */
    LongForeignKeyField<Wallet, Long, User> FK_USER = LongForeignKeyField.create(
        Identifier.FK_USER,
        Wallet::getFkUser,
        Wallet::setFkUser,
        User.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Wallet} field that can be obtained
     * using the {@link Wallet#getFkCurrency()} method.
     */
    LongForeignKeyField<Wallet, Long, Currency> FK_CURRENCY = LongForeignKeyField.create(
        Identifier.FK_CURRENCY,
        Wallet::getFkCurrency,
        Wallet::setFkCurrency,
        Currency.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Wallet} field that can be obtained
     * using the {@link Wallet#getAmount()} method.
     */
    ComparableField<Wallet, Double, Double> AMOUNT = ComparableField.create(
        Identifier.AMOUNT,
        o -> OptionalUtil.unwrap(o.getAmount()),
        Wallet::setAmount,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Wallet} field that can be obtained
     * using the {@link Wallet#getWalletAddress()} method.
     */
    StringField<Wallet, String> WALLET_ADDRESS = StringField.create(
        Identifier.WALLET_ADDRESS,
        o -> OptionalUtil.unwrap(o.getWalletAddress()),
        Wallet::setWalletAddress,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Wallet. The id field corresponds to the database
     * column petro-coin.petro-coin.wallet.id.
     * 
     * @return the id of this Wallet
     */
    long getId();
    
    /**
     * Returns the fkUser of this Wallet. The fkUser field corresponds to the
     * database column petro-coin.petro-coin.wallet.fk_user.
     * 
     * @return the fkUser of this Wallet
     */
    long getFkUser();
    
    /**
     * Returns the fkCurrency of this Wallet. The fkCurrency field corresponds
     * to the database column petro-coin.petro-coin.wallet.fk_currency.
     * 
     * @return the fkCurrency of this Wallet
     */
    long getFkCurrency();
    
    /**
     * Returns the amount of this Wallet. The amount field corresponds to the
     * database column petro-coin.petro-coin.wallet.amount.
     * 
     * @return the amount of this Wallet
     */
    OptionalDouble getAmount();
    
    /**
     * Returns the walletAddress of this Wallet. The walletAddress field
     * corresponds to the database column
     * petro-coin.petro-coin.wallet.wallet_address.
     * 
     * @return the walletAddress of this Wallet
     */
    Optional<String> getWalletAddress();
    
    /**
     * Sets the id of this Wallet. The id field corresponds to the database
     * column petro-coin.petro-coin.wallet.id.
     * 
     * @param id to set of this Wallet
     * @return   this Wallet instance
     */
    Wallet setId(long id);
    
    /**
     * Sets the fkUser of this Wallet. The fkUser field corresponds to the
     * database column petro-coin.petro-coin.wallet.fk_user.
     * 
     * @param fkUser to set of this Wallet
     * @return       this Wallet instance
     */
    Wallet setFkUser(long fkUser);
    
    /**
     * Sets the fkCurrency of this Wallet. The fkCurrency field corresponds to
     * the database column petro-coin.petro-coin.wallet.fk_currency.
     * 
     * @param fkCurrency to set of this Wallet
     * @return           this Wallet instance
     */
    Wallet setFkCurrency(long fkCurrency);
    
    /**
     * Sets the amount of this Wallet. The amount field corresponds to the
     * database column petro-coin.petro-coin.wallet.amount.
     * 
     * @param amount to set of this Wallet
     * @return       this Wallet instance
     */
    Wallet setAmount(Double amount);
    
    /**
     * Sets the walletAddress of this Wallet. The walletAddress field
     * corresponds to the database column
     * petro-coin.petro-coin.wallet.wallet_address.
     * 
     * @param walletAddress to set of this Wallet
     * @return              this Wallet instance
     */
    Wallet setWalletAddress(String walletAddress);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findFkUser(Manager<User> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Currency. If no such
     * Currency exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Currency findFkCurrency(Manager<Currency> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Wallet> {
        
        ID             ("id"),
        FK_USER        ("fk_user"),
        FK_CURRENCY    ("fk_currency"),
        AMOUNT         ("amount"),
        WALLET_ADDRESS ("wallet_address");
        
        private final String columnId;
        private final TableIdentifier<Wallet> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "petro-coin";
        }
        
        @Override
        public String getSchemaId() {
            return "petro-coin";
        }
        
        @Override
        public String getTableId() {
            return "wallet";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Wallet> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}