package leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.generated;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import java.util.StringJoiner;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import leo.prj.petrocoin.db.petro_coin.petro_coin.currency.Currency;
import leo.prj.petrocoin.db.petro_coin.petro_coin.user.User;
import leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.Wallet;

/**
 * The generated base implementation of the
 * {@link leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.Wallet}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedWalletImpl implements Wallet {

	private long id;
	private long fkUser;
	private long fkCurrency;
	private Double amount;
	private String walletAddress;

	protected GeneratedWalletImpl() {
	}

	@Override
	public long getId() {
		return id;
	}

	@Override
	public OptionalLong getFkUser() {
		return OptionalUtil.ofNullable(fkUser);
	}

	@Override
	public OptionalLong getFkCurrency() {
		return OptionalUtil.ofNullable(fkCurrency);
	}

	@Override
	public OptionalDouble getAmount() {
		return OptionalUtil.ofNullable(amount);
	}

	@Override
	public Optional<String> getWalletAddress() {
		return Optional.ofNullable(walletAddress);
	}

	@Override
	public Wallet setId(long id) {
		this.id = id;
		return this;
	}

	@Override
	public Wallet setFkUser(long fkUser) {
		this.fkUser = fkUser;
		return this;
	}

	@Override
	public Wallet setFkCurrency(long fkCurrency) {
		this.fkCurrency = fkCurrency;
		return this;
	}

	@Override
	public Wallet setAmount(Double amount) {
		this.amount = amount;
		return this;
	}

	@Override
	public Wallet setWalletAddress(String walletAddress) {
		this.walletAddress = walletAddress;
		return this;
	}

	@Override
	public Optional<User> findFkUser(Manager<User> foreignManager) {
		if (getFkUser().isPresent()) {
			return foreignManager.stream().filter(User.ID.equal(getFkUser().getAsLong())).findAny();
		} else {
			return Optional.empty();
		}
	}

	@Override
	public Optional<Currency> findFkCurrency(Manager<Currency> foreignManager) {
		if (getFkCurrency().isPresent()) {
			return foreignManager.stream().filter(Currency.ID.equal(getFkCurrency().getAsLong())).findAny();
		} else {
			return Optional.empty();
		}
	}

	@Override
	public String toString() {
		final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
		sj.add("id = " + Objects.toString(getId()));
		sj.add("fkUser = " + Objects.toString(OptionalUtil.unwrap(getFkUser())));
		sj.add("fkCurrency = " + Objects.toString(OptionalUtil.unwrap(getFkCurrency())));
		sj.add("amount = " + Objects.toString(OptionalUtil.unwrap(getAmount())));
		sj.add("walletAddress = " + Objects.toString(OptionalUtil.unwrap(getWalletAddress())));
		return "WalletImpl " + sj.toString();
	}

	@Override
	public boolean equals(Object that) {
		if (this == that) {
			return true;
		}
		if (!(that instanceof Wallet)) {
			return false;
		}
		final Wallet thatWallet = (Wallet) that;
		if (this.getId() != thatWallet.getId()) {
			return false;
		}
		if (!Objects.equals(this.getFkUser(), thatWallet.getFkUser())) {
			return false;
		}
		if (!Objects.equals(this.getFkCurrency(), thatWallet.getFkCurrency())) {
			return false;
		}
		if (!Objects.equals(this.getAmount(), thatWallet.getAmount())) {
			return false;
		}
		if (!Objects.equals(this.getWalletAddress(), thatWallet.getWalletAddress())) {
			return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		int hash = 7;
		hash = 31 * hash + Long.hashCode(getId());
		hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkUser()));
		hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFkCurrency()));
		hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAmount()));
		hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getWalletAddress()));
		return hash;
	}
}