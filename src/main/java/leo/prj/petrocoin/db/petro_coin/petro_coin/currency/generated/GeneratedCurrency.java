package leo.prj.petrocoin.db.petro_coin.petro_coin.currency.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;
import leo.prj.petrocoin.db.petro_coin.petro_coin.currency.Currency;

/**
 * The generated base for the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.currency.Currency}-interface
 * representing entities of the {@code currency}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCurrency {
    
    /**
     * This Field corresponds to the {@link Currency} field that can be obtained
     * using the {@link Currency#getId()} method.
     */
    LongField<Currency, Long> ID = LongField.create(
        Identifier.ID,
        Currency::getId,
        Currency::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Currency} field that can be obtained
     * using the {@link Currency#getName()} method.
     */
    StringField<Currency, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Currency::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Currency} field that can be obtained
     * using the {@link Currency#getIsPetroCoin()} method.
     */
    ComparableField<Currency, Integer, Integer> IS_PETRO_COIN = ComparableField.create(
        Identifier.IS_PETRO_COIN,
        o -> OptionalUtil.unwrap(o.getIsPetroCoin()),
        Currency::setIsPetroCoin,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Currency} field that can be obtained
     * using the {@link Currency#getCreatedDate()} method.
     */
    ComparableField<Currency, Timestamp, Timestamp> CREATED_DATE = ComparableField.create(
        Identifier.CREATED_DATE,
        o -> OptionalUtil.unwrap(o.getCreatedDate()),
        Currency::setCreatedDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Currency} field that can be obtained
     * using the {@link Currency#getUpdatedDate()} method.
     */
    ComparableField<Currency, Timestamp, Timestamp> UPDATED_DATE = ComparableField.create(
        Identifier.UPDATED_DATE,
        o -> OptionalUtil.unwrap(o.getUpdatedDate()),
        Currency::setUpdatedDate,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Currency. The id field corresponds to the database
     * column petro-coin.petro-coin.currency.id.
     * 
     * @return the id of this Currency
     */
    long getId();
    
    /**
     * Returns the name of this Currency. The name field corresponds to the
     * database column petro-coin.petro-coin.currency.name.
     * 
     * @return the name of this Currency
     */
    Optional<String> getName();
    
    /**
     * Returns the isPetroCoin of this Currency. The isPetroCoin field
     * corresponds to the database column
     * petro-coin.petro-coin.currency.is_petro_coin.
     * 
     * @return the isPetroCoin of this Currency
     */
    OptionalInt getIsPetroCoin();
    
    /**
     * Returns the createdDate of this Currency. The createdDate field
     * corresponds to the database column
     * petro-coin.petro-coin.currency.created_date.
     * 
     * @return the createdDate of this Currency
     */
    Optional<Timestamp> getCreatedDate();
    
    /**
     * Returns the updatedDate of this Currency. The updatedDate field
     * corresponds to the database column
     * petro-coin.petro-coin.currency.updated_date.
     * 
     * @return the updatedDate of this Currency
     */
    Optional<Timestamp> getUpdatedDate();
    
    /**
     * Sets the id of this Currency. The id field corresponds to the database
     * column petro-coin.petro-coin.currency.id.
     * 
     * @param id to set of this Currency
     * @return   this Currency instance
     */
    Currency setId(long id);
    
    /**
     * Sets the name of this Currency. The name field corresponds to the
     * database column petro-coin.petro-coin.currency.name.
     * 
     * @param name to set of this Currency
     * @return     this Currency instance
     */
    Currency setName(String name);
    
    /**
     * Sets the isPetroCoin of this Currency. The isPetroCoin field corresponds
     * to the database column petro-coin.petro-coin.currency.is_petro_coin.
     * 
     * @param isPetroCoin to set of this Currency
     * @return            this Currency instance
     */
    Currency setIsPetroCoin(Integer isPetroCoin);
    
    /**
     * Sets the createdDate of this Currency. The createdDate field corresponds
     * to the database column petro-coin.petro-coin.currency.created_date.
     * 
     * @param createdDate to set of this Currency
     * @return            this Currency instance
     */
    Currency setCreatedDate(Timestamp createdDate);
    
    /**
     * Sets the updatedDate of this Currency. The updatedDate field corresponds
     * to the database column petro-coin.petro-coin.currency.updated_date.
     * 
     * @param updatedDate to set of this Currency
     * @return            this Currency instance
     */
    Currency setUpdatedDate(Timestamp updatedDate);
    
    enum Identifier implements ColumnIdentifier<Currency> {
        
        ID            ("id"),
        NAME          ("name"),
        IS_PETRO_COIN ("is_petro_coin"),
        CREATED_DATE  ("created_date"),
        UPDATED_DATE  ("updated_date");
        
        private final String columnId;
        private final TableIdentifier<Currency> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "petro-coin";
        }
        
        @Override
        public String getSchemaId() {
            return "petro-coin";
        }
        
        @Override
        public String getTableId() {
            return "currency";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Currency> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}