package leo.prj.petrocoin.db.petro_coin.petro_coin.petro_transaction.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.math.BigInteger;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;
import leo.prj.petrocoin.db.petro_coin.petro_coin.petro_transaction.PetroTransaction;
import leo.prj.petrocoin.db.petro_coin.petro_coin.rating.Rating;
import leo.prj.petrocoin.db.petro_coin.petro_coin.wallet.Wallet;

/**
 * The generated base for the {@link
 * leo.prj.petrocoin.db.petro_coin.petro_coin.petro_transaction.PetroTransaction}-interface
 * representing entities of the {@code petro_transaction}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPetroTransaction {
    
    /**
     * This Field corresponds to the {@link PetroTransaction} field that can be
     * obtained using the {@link PetroTransaction#getId()} method.
     */
    ComparableField<PetroTransaction, BigInteger, BigInteger> ID = ComparableField.create(
        Identifier.ID,
        PetroTransaction::getId,
        PetroTransaction::setId,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link PetroTransaction} field that can be
     * obtained using the {@link PetroTransaction#getFkWallet()} method.
     */
    ComparableForeignKeyField<PetroTransaction, Long, Long, Wallet> FK_WALLET = ComparableForeignKeyField.create(
        Identifier.FK_WALLET,
        o -> OptionalUtil.unwrap(o.getFkWallet()),
        PetroTransaction::setFkWallet,
        Wallet.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PetroTransaction} field that can be
     * obtained using the {@link PetroTransaction#getFkRating()} method.
     */
    ComparableForeignKeyField<PetroTransaction, Long, Long, Rating> FK_RATING = ComparableForeignKeyField.create(
        Identifier.FK_RATING,
        o -> OptionalUtil.unwrap(o.getFkRating()),
        PetroTransaction::setFkRating,
        Rating.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PetroTransaction} field that can be
     * obtained using the {@link PetroTransaction#getAmount()} method.
     */
    ComparableField<PetroTransaction, Double, Double> AMOUNT = ComparableField.create(
        Identifier.AMOUNT,
        o -> OptionalUtil.unwrap(o.getAmount()),
        PetroTransaction::setAmount,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PetroTransaction} field that can be
     * obtained using the {@link PetroTransaction#getIsBuying()} method.
     */
    ComparableField<PetroTransaction, Integer, Integer> IS_BUYING = ComparableField.create(
        Identifier.IS_BUYING,
        o -> OptionalUtil.unwrap(o.getIsBuying()),
        PetroTransaction::setIsBuying,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this PetroTransaction. The id field corresponds to the
     * database column petro-coin.petro-coin.petro_transaction.id.
     * 
     * @return the id of this PetroTransaction
     */
    BigInteger getId();
    
    /**
     * Returns the fkWallet of this PetroTransaction. The fkWallet field
     * corresponds to the database column
     * petro-coin.petro-coin.petro_transaction.fk_wallet.
     * 
     * @return the fkWallet of this PetroTransaction
     */
    OptionalLong getFkWallet();
    
    /**
     * Returns the fkRating of this PetroTransaction. The fkRating field
     * corresponds to the database column
     * petro-coin.petro-coin.petro_transaction.fk_rating.
     * 
     * @return the fkRating of this PetroTransaction
     */
    OptionalLong getFkRating();
    
    /**
     * Returns the amount of this PetroTransaction. The amount field corresponds
     * to the database column petro-coin.petro-coin.petro_transaction.amount.
     * 
     * @return the amount of this PetroTransaction
     */
    OptionalDouble getAmount();
    
    /**
     * Returns the isBuying of this PetroTransaction. The isBuying field
     * corresponds to the database column
     * petro-coin.petro-coin.petro_transaction.is_buying.
     * 
     * @return the isBuying of this PetroTransaction
     */
    OptionalInt getIsBuying();
    
    /**
     * Sets the id of this PetroTransaction. The id field corresponds to the
     * database column petro-coin.petro-coin.petro_transaction.id.
     * 
     * @param id to set of this PetroTransaction
     * @return   this PetroTransaction instance
     */
    PetroTransaction setId(BigInteger id);
    
    /**
     * Sets the fkWallet of this PetroTransaction. The fkWallet field
     * corresponds to the database column
     * petro-coin.petro-coin.petro_transaction.fk_wallet.
     * 
     * @param fkWallet to set of this PetroTransaction
     * @return         this PetroTransaction instance
     */
    PetroTransaction setFkWallet(Long fkWallet);
    
    /**
     * Sets the fkRating of this PetroTransaction. The fkRating field
     * corresponds to the database column
     * petro-coin.petro-coin.petro_transaction.fk_rating.
     * 
     * @param fkRating to set of this PetroTransaction
     * @return         this PetroTransaction instance
     */
    PetroTransaction setFkRating(Long fkRating);
    
    /**
     * Sets the amount of this PetroTransaction. The amount field corresponds to
     * the database column petro-coin.petro-coin.petro_transaction.amount.
     * 
     * @param amount to set of this PetroTransaction
     * @return       this PetroTransaction instance
     */
    PetroTransaction setAmount(Double amount);
    
    /**
     * Sets the isBuying of this PetroTransaction. The isBuying field
     * corresponds to the database column
     * petro-coin.petro-coin.petro_transaction.is_buying.
     * 
     * @param isBuying to set of this PetroTransaction
     * @return         this PetroTransaction instance
     */
    PetroTransaction setIsBuying(Integer isBuying);
    
    /**
     * Queries the specified manager for the referenced Wallet. If no such
     * Wallet exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Wallet> findFkWallet(Manager<Wallet> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Rating. If no such
     * Rating exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Rating> findFkRating(Manager<Rating> foreignManager);
    
    enum Identifier implements ColumnIdentifier<PetroTransaction> {
        
        ID        ("id"),
        FK_WALLET ("fk_wallet"),
        FK_RATING ("fk_rating"),
        AMOUNT    ("amount"),
        IS_BUYING ("is_buying");
        
        private final String columnId;
        private final TableIdentifier<PetroTransaction> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "petro-coin";
        }
        
        @Override
        public String getSchemaId() {
            return "petro-coin";
        }
        
        @Override
        public String getTableId() {
            return "petro_transaction";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<PetroTransaction> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}