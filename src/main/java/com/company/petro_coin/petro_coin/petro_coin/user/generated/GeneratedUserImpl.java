package com.company.petro_coin.petro_coin.petro_coin.user.generated;

import com.company.petro_coin.petro_coin.petro_coin.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.petro_coin.petro_coin.petro_coin.user.User}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserImpl implements User {
    
    private int id;
    private String fullName;
    private String password;
    private String email;
    private String mobile;
    private String nation;
    private Integer isActive;
    private Integer isDelete;
    private String bankCode;
    
    protected GeneratedUserImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getFullName() {
        return Optional.ofNullable(fullName);
    }
    
    @Override
    public Optional<String> getPassword() {
        return Optional.ofNullable(password);
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Optional<String> getMobile() {
        return Optional.ofNullable(mobile);
    }
    
    @Override
    public Optional<String> getNation() {
        return Optional.ofNullable(nation);
    }
    
    @Override
    public OptionalInt getIsActive() {
        return OptionalUtil.ofNullable(isActive);
    }
    
    @Override
    public OptionalInt getIsDelete() {
        return OptionalUtil.ofNullable(isDelete);
    }
    
    @Override
    public Optional<String> getBankCode() {
        return Optional.ofNullable(bankCode);
    }
    
    @Override
    public User setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public User setFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }
    
    @Override
    public User setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public User setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public User setMobile(String mobile) {
        this.mobile = mobile;
        return this;
    }
    
    @Override
    public User setNation(String nation) {
        this.nation = nation;
        return this;
    }
    
    @Override
    public User setIsActive(Integer isActive) {
        this.isActive = isActive;
        return this;
    }
    
    @Override
    public User setIsDelete(Integer isDelete) {
        this.isDelete = isDelete;
        return this;
    }
    
    @Override
    public User setBankCode(String bankCode) {
        this.bankCode = bankCode;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "       + Objects.toString(getId()));
        sj.add("fullName = " + Objects.toString(OptionalUtil.unwrap(getFullName())));
        sj.add("password = " + Objects.toString(OptionalUtil.unwrap(getPassword())));
        sj.add("email = "    + Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add("mobile = "   + Objects.toString(OptionalUtil.unwrap(getMobile())));
        sj.add("nation = "   + Objects.toString(OptionalUtil.unwrap(getNation())));
        sj.add("isActive = " + Objects.toString(OptionalUtil.unwrap(getIsActive())));
        sj.add("isDelete = " + Objects.toString(OptionalUtil.unwrap(getIsDelete())));
        sj.add("bankCode = " + Objects.toString(OptionalUtil.unwrap(getBankCode())));
        return "UserImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof User)) { return false; }
        final User thatUser = (User)that;
        if (this.getId() != thatUser.getId()) { return false; }
        if (!Objects.equals(this.getFullName(), thatUser.getFullName())) { return false; }
        if (!Objects.equals(this.getPassword(), thatUser.getPassword())) { return false; }
        if (!Objects.equals(this.getEmail(), thatUser.getEmail())) { return false; }
        if (!Objects.equals(this.getMobile(), thatUser.getMobile())) { return false; }
        if (!Objects.equals(this.getNation(), thatUser.getNation())) { return false; }
        if (!Objects.equals(this.getIsActive(), thatUser.getIsActive())) { return false; }
        if (!Objects.equals(this.getIsDelete(), thatUser.getIsDelete())) { return false; }
        if (!Objects.equals(this.getBankCode(), thatUser.getBankCode())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFullName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPassword()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEmail()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMobile()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getNation()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsActive()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsDelete()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getBankCode()));
        return hash;
    }
}